// cmpxchg(*dest, new, cmp)
data:
    const uintptr_t guard = (u64)-1;
    buffer front_buf, back_buf;
    front_ptr = front_buf, back_ptr = back_buf;
    volatile shared_ptr = back_ptr;
    volatile new_data_ready = false;
    volatile stop_validation = false;
    binary_semaphore sem;
loader_thread:
    local_ptr = xchg(&shared_ptr, guard)
    // do work with local ptr
    shared_ptr = local_ptr
    new_data_ready = true
    sem.signal()
validator_thread:
    while (!stop_validation):
        while (!xchg(&new_data_ready, false) || (guard == cmpxchg(&shared_ptr, front_ptr, back_ptr))):
            sem.try_wait()
        swap(front_ptr, back_ptr)
        // do work with front ptr
        front_ptr->clear
